% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynirt.R
\name{fit}
\alias{fit}
\title{dynIRT main function}
\usage{
fit(
  data,
  chains = 4,
  parallelize_within_chains = FALSE,
  threads_per_chain = NULL,
  force_recompile = FALSE,
  init_kappa = FALSE,
  init = NULL,
  return_data = TRUE,
  n_dim = 1,
  constant_alpha = FALSE,
  separate_eta = TRUE,
  lambda_zeros = NULL,
  df_sigma_metric = 4,
  df_sigma_alpha_evol = 4,
  df_sigma_eta_evol = 4,
  mu_sigma_metric = 0.5,
  mu_sigma_alpha_evol = 0.5,
  mu_sigma_eta_evol = 0.5,
  sd_sigma_metric = 0.5,
  sd_sigma_alpha_evol = 0.5,
  sd_sigma_eta_evol = 0.5,
  seed = 123,
  ...
)
}
\arguments{
\item{data}{(list) Data formatted for Stan, typically created by \code{shape()}.}

\item{chains}{(positive integer) The number of Markov chains to run. The
default is 4.}

\item{parallelize_within_chains}{(logical) Should computations in a given
Markov chain be parallelized using Stan's \code{reduce_sum()} function?
Defaults to \code{FALSE}. If \code{TRUE}, then \code{threads_per_chain} should be set as
well. Since speed gains/losses from parallelization are highly
problem-specific, it is advisable to first experiment with test runs of a
few iterations.}

\item{threads_per_chain}{(positive integer) Number of parallel processes to
use for within-chain parallelization. Ignored if
\code{parallelize_within_chains = FALSE}.}

\item{force_recompile}{(logical) Should \code{cmdstanr::compile()} be required to
recompile the Stan model? Defaults to \code{FALSE}.}

\item{init_kappa}{(logical) Should initial values for the item thresholds
\code{kappa} be pre-generated? This may reduce warnings of starting values
being rejected due to incompatibility with the order constraints on
\code{kappa}. Ignored unless \code{init = NULL}.}

\item{init}{(multiple options) The initialization method to use for the
variables declared in the parameters block of the Stan program. For for
details, see the documentation for \code{cmdstanr::sample()}.}

\item{return_data}{(logical) Should the data list fed to
\code{cmdstanr::sample()}, which includes additional elements not included in
the output of \code{shape()}, be returned with the fitted model? Defaults to
\code{TRUE}.}

\item{n_dim}{(positive integer) Number of latent factors (i.e., dimensions)
in the factor model. Defaults to \code{1}.}

\item{constant_alpha}{(logical) Should the item thresholds (\code{kappa}) be held
constant across time periods? If \code{FALSE} (the default), the thresholds
for a given item will be allowed to shift by a constant amount (governed
by \code{alpha}) in each time period.}

\item{separate_eta}{(logical) Should units' factor scores (\code{eta}) be assigned
the same priors in every time period? Defaults to \code{TRUE}. If \code{FALSE}, the
scores in each period will be given priors centered on their value in the
previous period, thus smoothing the estimates across periods.}

\item{lambda_zeros}{(multiple options) Should some item loadings (\code{lambda})
be fixed at 0, and if so which ones? Rotational invariance (label
switching) across latent factors can be avoided by setting, for each
factor $d$, $d-1$ loadings to 0. If \code{lambda_zeros = NULL} (the default),
factor-specific parameters (e.g., \code{eta}) will not be identified, and the
draws will have to be rotated after sampling using \code{identify_draws(., rotate = TRUE)}. If \code{lambda_zeros = TRUE}, rotational identification will
be imposed by automatically choosing $d-1$ loadings to set to 0. Users
can also choose which loadings to restrict by inputting a two-column
character matrix, each row of which corresponds to a restriction. The
first column should be the name of an item, and the second column should
be a dimension number (as a character, e.g., \code{"2"}).}

\item{df_sigma_metric}{(positive real) Degrees of freedom of the Student's t
prior for \code{sigma_metric}, the residual standard deviations of the metric
items. Defaults to 4.}

\item{df_sigma_alpha_evol}{(positive real) Degrees of freedom of the
Student's t prior for \code{sigma_alpha_evol}, the standard deviation of the
dynamic prior for \code{alpha}. Defaults to 4.}

\item{df_sigma_eta_evol}{(positive real) Degrees of freedom of the (half)
Student's t prior for \code{sigma_eta_evol}, the standard deviation of the
dynamic prior for \code{eta}. Defaults to \code{4}.}

\item{mu_sigma_metric}{(real) Mean of the (half) Student's t prior for
\code{sigma_alpha_evol}, the residual standard deviations of the metric
items. Defaults to \code{0.5}.}

\item{mu_sigma_alpha_evol}{(real) Mean of the (half) Student's t prior for
\code{sigma_alpha_evol}, the standard deviation of the dynamic prior for
\code{alpha}. Defaults to \code{0.1}.}

\item{mu_sigma_eta_evol}{(real) Mean of the (half) Student's t prior for
\code{sigma_eta_evol}, the standard deviation of the dynamic prior for
\code{eta}. Defaults to \code{0.1}.}

\item{sd_sigma_metric}{(positive real) Standard deviation of the (half)
Student's t prior for \code{sigma_alpha_evol}, the residual standard
deviations of the metric items. Defaults to \code{0.5}.}

\item{sd_sigma_alpha_evol}{(positive real) Standard deviation of the
Student's t prior for \code{sigma_alpha_evol}, the standard deviation of the
dynamic prior for \code{alpha}. Defaults to \code{0.1}.}

\item{sd_sigma_eta_evol}{(positive real) Standard deviation of the (half)
Student's t prior for \code{sigma_alpha_evol}, the residual standard
deviations of the metric items. Defaults to \code{0.1}.}

\item{seed}{(positive integer) An integer vector of length one indicating the
state of Stanâ€™s pseudo-random number generator. Defaults to \code{123}.}

\item{...}{Additional arguments to \code{cmdstanr::sample()}.}
}
\value{
A dynIRT object containing
\describe{
\item{unit_labels}{}
\item{time_labels}{}
\item{binary_item_labels}{}
\item{ordinal_item_labels}{}
\item{metric_item_labels}{}
}
}
\description{
Fit a dynIRT model using stan
}
